# -*- coding: utf-8 -*-
"""model_helper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lKjyk4FBhGA4zC1ghSS9d2DBIyIEOynn
"""

import torch
import torch.nn as nn


class model_helper(nn.Module):
    def __init__(self, args):
        super(model_helper, self).__init__()
        self.name = args.model

    def loss_func(self, output, target, meta_target):
        pass

    def load_model(self, path, epoch):
        state_dict = torch.load(path + "{}_epoch_{}.pth".format(self.name, epoch))[
            "state_dict"
        ]
        self.load_state_dict(state_dict)

    def save_model(self, path, epoch, acc, loss):
        torch.save(
            {"state_dict": self.state_dict(), "acc": acc, "loss": loss},
            path + "{}_epoch_{}.pth".format(self.name, epoch),
        )

    def model_accuracy(self, output, target, meta_target):
        predictions = output[0].data.max(1)[1]
        correct = predictions.eq(target.data).cpu().sum().numpy()
        accuracy = correct * 100.0 / target.size()[0]
        return accuracy

    def model_train(self, image, target, meta_target):
        self.optimizer.zero_grad()
        output = self(image)
        loss = self.loss_func(output, target, meta_target)
        loss.backward()
        self.optimizer.step()
        return loss.item(), self.model_accuracy(output, target, meta_target)

    def model_validate(self, image, target, meta_target):
        with torch.no_grad():
            output = self(image)
        loss = self.loss_func(output, target, meta_target)
        return loss.item(), self.model_accuracy(output, target, meta_target)

    def model_test(self, image, target, meta_target):
        with torch.no_grad():
            output = self(image)
        return self.model_accuracy(output, target, meta_target)